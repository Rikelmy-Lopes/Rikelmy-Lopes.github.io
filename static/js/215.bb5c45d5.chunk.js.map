{"version":3,"file":"static/js/215.bb5c45d5.chunk.js","mappings":"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","sources":["components/migration.jsx","components/ProjectCard.jsx","components/Projects.jsx"],"sourcesContent":["import React from 'react';\nimport Nav from 'react-bootstrap/Nav';\n\nexport const Jumbotron = (props) => {\n  const bgStyle = props.style ?? { backgroundColor: '#e9ecef' };\n  return (\n    <div id={props.id} className={`py-3 ${props.className}`} style={bgStyle}>\n      <div className=\"container py-5\">\n        {props.children}\n      </div>\n    </div>\n  );\n};\n\nexport const NavLink = (props) => {\n  return (\n    <Nav.Link\n      href={props.href}\n      target={props.target}\n      rel={props.rel}\n    >\n      <span className={`nav-item lead ${props.className}`}>\n        {props.children}\n      </span>\n    </Nav.Link>\n  );\n};\n\nJumbotron.propTypes = {\n}.isRequired;\n\nNavLink.propTypes = {\n}.isRequired;\n","import React, { useState, useEffect, useCallback } from 'react';\nimport Col from 'react-bootstrap/Col';\nimport Card from 'react-bootstrap/Card';\nimport Skeleton from 'react-loading-skeleton';\nimport axios from 'axios';\n\nconst ProjectCard = ({ value }) => {\n  const {\n    name,\n    description,\n    svn_url,\n    stargazers_count,\n    languages_url,\n    pushed_at,\n  } = value;\n  return (\n    <Col md={6}>\n      <Card className=\"card p-3 mb-5 bg-white rounded border border-dark\">\n        <Card.Body style={{\n          fontSize: '200%'\n        }}>\n          <Card.Title className='text-black project-title' as=\"h1\">{name || <Skeleton />} </Card.Title>\n          <Card.Text className='text-black'>{(!description) ? '' : description || <Skeleton count={3} />} </Card.Text>\n          {svn_url ? <CardButtons svn_url={svn_url} /> : <Skeleton count={2} />}\n          <hr />\n          {languages_url ? (\n            <Language languages_url={languages_url} repo_url={svn_url} />\n          ) : (\n            <Skeleton count={3} />\n          )}\n          {value ? (\n            <CardFooter star_count={stargazers_count} repo_url={svn_url} pushed_at={pushed_at} />\n          ) : (\n            <Skeleton />\n          )}\n        </Card.Body>\n      </Card>\n    </Col>\n  );\n};\n\nconst CardButtons = ({ svn_url }) => {\n  return (\n    <div className=\"d-grid gap-2 d-md-block\">\n      <a\n        href={`${svn_url}/archive/master.zip`}\n        className=\"btn btn-mine btn-lg btn-outline-secondary mx-2\"\n      >\n        <i className=\"fab fa-github\" /> Clonar Projeto\n      </a>\n      <a href={svn_url} target=\" _blank\" className=\"btn btn-mine btn-lg btn-outline-secondary mx-2\">\n        <i className=\"fab fa-github\" /> Repo\n      </a>\n    </div>\n  );\n};\n\nconst Language = ({ languages_url, repo_url }) => {\n  const [data, setData] = useState([]);\n\n  const handleRequest = useCallback(async () => {\n    try {\n      const response = await axios.get(languages_url);\n      return setData(response.data);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [languages_url]);\n\n  useEffect(() => {\n    handleRequest();\n  }, [handleRequest]);\n\n  const array = [];\n  let total_count = 0;\n  for (let index in data) {\n    array.push(index);\n    total_count += data[index];\n  }\n\n  return (\n    <div className=\"pb-3 text-black\">\n      Linguagens:{' '}\n      {array.length\n        ? array.map((language) => (\n          <a\n            key={language}\n            className=\"card-link\"\n            href={repo_url + `/search?l=${language}`}\n            target=\" _blank\"\n            rel=\"noopener noreferrer\"\n          >\n            <span className=\"badge bg-dark text-light\">\n              {language}:{' '}\n              {Math.trunc((data[language] / total_count) * 1000) / 10} %\n            </span>\n          </a>\n\n        ))\n        : 'code yet to be deployed.'}\n    </div>\n  );\n};\n\nconst CardFooter = ({ star_count, repo_url, pushed_at }) => {\n  const [updated_at, setUpdated_at] = useState('0 mints');\n\n  const handleUpdatetime = useCallback(() => {\n    const date = new Date(pushed_at);\n    const nowdate = new Date();\n    const diff = nowdate.getTime() - date.getTime();\n    const hours = Math.trunc(diff / 1000 / 60 / 60);\n\n    if (hours < 24) {\n      if (hours < 1) return setUpdated_at('agora');\n      let measurement = hours === 1 ? 'hora' : 'horas';\n      return setUpdated_at(`${hours.toString()} ${measurement} atrÃ¡s`);\n    } else {\n      const options = { day: 'numeric', month: 'long', year: 'numeric' };\n      const time = new Intl.DateTimeFormat('pt-br', options).format(date);\n      return setUpdated_at(`em ${time}`);\n    }\n  }, [pushed_at]);\n\n  useEffect(() => {\n    handleUpdatetime();\n  }, [handleUpdatetime]);\n\n  return (\n    <p className=\"card-text\">\n      <a\n        href={repo_url + '/stargazers'}\n        target=\" _blank\"\n        className=\"text-dark text-decoration-none\"\n      >\n        <span className=\"text-black card-link mr-4\">\n          <i className=\"fab fa-github\" /> Estrelas{' '}\n          <span style={{color: 'black'}} className=\"badge badge-light\">{star_count}</span>\n        </span>\n      </a>\n      <small className=\"text-black\">Atualizado {updated_at}</small>\n    </p>\n  );\n};\n\nexport default ProjectCard;\n\nProjectCard.propTypes = {}.isRequired;\nLanguage.propTypes = {}.isRequired;\nCardButtons.propTypes = {}.isRequired;\nCardFooter.propTypes = {}.isRequired;","import React, { useState, useEffect, useCallback } from 'react';\nimport '../style/Projects.css';\nimport Container from 'react-bootstrap/Container';\nimport { Jumbotron } from './migration';\nimport Row from 'react-bootstrap/Row';\nimport ProjectCard from './ProjectCard';\nimport axios from 'axios';\n\n\nconst dummyProject = {\n  name: null,\n  description: null,\n  svn_url: null,\n  stargazers_count: null,\n  languages_url: null,\n  pushed_at: null,\n};\nconst API = 'https://api.github.com';\n// const gitHubQuery = \"/repos?sort=updated&direction=desc\";\n// const specficQuerry = \"https://api.github.com/repos/hashirshoaeb/\";\n\nconst Project = ({ heading, username, length, specfic }) => {\n  const allReposAPI = `${API}/users/${username}/repos?sort=updated&direction=desc`;\n  const specficReposAPI = `${API}/repos/${username}`;\n  const dummyProjectsArr = new Array(length + specfic.length).fill(\n    dummyProject\n  );\n\n  const [projectsArray, setProjectsArray] = useState([]);\n\n  const fetchRepos = useCallback(async () => {\n    let repoList = [];\n    try {\n      // getting all repos\n      const response = await axios.get(allReposAPI);\n      // slicing to the length\n      repoList = [...response.data.slice(0, length)];\n      // adding specified repos\n      try {\n        for (let repoName of specfic) {\n          const response = await axios.get(`${specficReposAPI}/${repoName}`);\n          repoList.push(response.data);\n        }\n      } catch (error) {\n        console.error(error.message);\n      }\n      // setting projectArray\n      // TODO: remove the duplication.\n      setProjectsArray(repoList);\n    } catch (error) {\n      console.error(error.message);\n    }\n  }, [allReposAPI, length, specfic, specficReposAPI]);\n\n  useEffect(() => {\n    fetchRepos();\n  }, [fetchRepos]);\n\n  return (\n    <div id=\"projects\" className='projects-container'>\n      <Jumbotron fluid className=\"bg-white m-0\">\n        <Container>\n          <h2 className=\"display-3 pb-5 text-center\">\n            <span className='projects-sec__main' > { heading } </span>\n            <span className='heading-sec__sub'> Alguns Projetos Back-end Desenvolvidos por Mim! </span>\n          </h2>\n          <Row>\n            {projectsArray.length\n              ? projectsArray.map((project, index) => (\n                <ProjectCard\n                  key={`project-card-${index}`}\n                  id={`project-card-${index}`}\n                  value={project}\n                />\n              ))\n              : dummyProjectsArr.map((project, index) => (\n                <ProjectCard\n                  key={`dummy-${index}`}\n                  id={`dummy-${index}`}\n                  value={project}\n                />\n              ))}\n          </Row>\n        </Container>\n      </Jumbotron>\n    </div>\n  );\n};\n\nProject.propTypes = {}.isRequired;\n\nexport default Project;\n"],"names":["Jumbotron","props","bgStyle","style","backgroundColor","id","className","children","CardButtons","svn_url","href","target","Language","languages_url","repo_url","useState","data","setData","handleRequest","useCallback","axios","response","console","error","message","useEffect","array","total_count","index","push","length","map","language","rel","Math","trunc","CardFooter","star_count","pushed_at","updated_at","setUpdated_at","handleUpdatetime","date","Date","diff","getTime","hours","measurement","toString","time","Intl","DateTimeFormat","day","month","year","format","color","value","name","description","stargazers_count","Col","md","Card","fontSize","as","count","dummyProject","API","heading","username","specfic","allReposAPI","specficReposAPI","dummyProjectsArr","Array","fill","projectsArray","setProjectsArray","fetchRepos","repoList","slice","repoName","fluid","Container","Row","project"],"sourceRoot":""}